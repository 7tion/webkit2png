#!/usr/bin/python

# webkit2png - makes screenshots of webpages
# http://www.paranoidfish.org/projects/webkit2png
__version__ = "0.3.1"

# $Id$

# Copyright (C) 2004 Paul Hammond
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

from Foundation import *
import WebKit
from AppKit import *
import objc
import sys
from optparse import OptionParser
import re
import os
import md5

class AppDelegate (NSObject):
    # what happens when the app starts up
    def applicationDidFinishLaunching_(self, aNotification):
        webview = aNotification.object().windows()[0].contentView()
        webview.frameLoadDelegate().getURL(webview)

class WebkitLoad (NSObject, WebKit.protocols.WebFrameLoadDelegate):
    # what happens if something goes wrong while loading
    def webView_didFailLoadWithError_forFrame_(self,webview,error,frame):
        print " ... something went wrong" 
        self.getURL(webview)
    def webView_didFailProvisionalLoadWithError_forFrame_(self,webview,error,frame):
        print " ... something went wrong" 
        self.getURL(webview)

    def makeFilename(self,URL,options):
       # make the filename
       if (options.md5):
         md5obj = md5.md5()
         md5obj.update(URL)
         filename =  md5obj.hexdigest()
       else:
         filename = re.sub('\W','',URL);
         filename = re.sub('^http','',filename);
       if options.datestamp:
         import time
         now = time.strftime("%Y%m%d")
         filename = now + "-" + filename
       return filename 

    def saveImages(self,bitmapdata,filename,options):
        # save the fullsize png
        bitmapdata.representationUsingType_properties_(NSPNGFileType,None).writeToFile_atomically_(filename + ".png",objc.YES)

        # work out how big the thumbnail is
        width = bitmapdata.pixelsWide()
        height = bitmapdata.pixelsHigh()
        thumbWidth = (width * options.scale)
        thumbHeight = (height * options.scale)

        # make the thumbnails in a scratch image
        scratch = NSImage.alloc().initWithSize_(NSMakeSize(thumbWidth,thumbHeight))
        scratch.lockFocus()
        NSGraphicsContext.currentContext().setImageInterpolation_(NSImageInterpolationHigh)
        thumbRect = NSMakeRect(0.0, 0.0, thumbWidth, thumbHeight)
        clipRect = NSMakeRect(0.0, thumbHeight-options.clipheight, options.clipwidth, options.clipheight)
        bitmapdata.drawInRect_(thumbRect)
        thumbOutput = NSBitmapImageRep.alloc().initWithFocusedViewRect_(thumbRect)
        clipOutput = NSBitmapImageRep.alloc().initWithFocusedViewRect_(clipRect)
        scratch.unlockFocus()
           
        # save the thumbnails as pngs 
        thumbOutput.representationUsingType_properties_(NSPNGFileType,None).writeToFile_atomically_(filename + "-thumb.png",objc.YES)
        clipOutput.representationUsingType_properties_(NSPNGFileType,None).writeToFile_atomically_(filename + "-clipped.png",objc.YES)

    def getURL(self,webview):
        if self.urls:
            if self.urls[0] == '-':
                url = sys.stdin.readline().rstrip()
                if not url: NSApplication.sharedApplication().terminate_(None)
            else: 
                url = self.urls.pop(0)
        else:
            NSApplication.sharedApplication().terminate_(None)
        print "Fetching", url, "..."
        self.resetWebview(webview)
        webview.mainFrame().loadRequest_(NSURLRequest.requestWithURL_(NSURL.URLWithString_(url)))
        if not webview.mainFrame().provisionalDataSource():
            print " ... not a proper url?"
            self.getURL(webview)
     
    def resetWebview(self,webview):
        rect = NSMakeRect(0,0,self.options.initWidth,self.options.initHeight)
        webview.window().setContentSize_((self.options.initWidth,self.options.initHeight))
        webview.setFrame_(rect)
    
    def resizeWebview(self,view):
        view.window().display()
        view.window().setContentSize_(view.bounds().size)
        view.setFrame_(view.bounds())

    def captureView(self,view):
        view.lockFocus()
        bitmapdata = NSBitmapImageRep.alloc()
        bitmapdata.initWithFocusedViewRect_(view.bounds())
        view.unlockFocus()
        return bitmapdata
 
    # what happens when the page has finished loading
    def webView_didFinishLoadForFrame_(self,webview,frame):
        # don't care about subframes
        if (frame == webview.mainFrame()):
            view = frame.frameView().documentView()
            
            self.resizeWebview(view)

            URL = frame.dataSource().initialRequest().URL().absoluteString()
            filename = self.makeFilename(URL, self.options) 

            bitmapdata = self.captureView(view)  
            self.saveImages(bitmapdata,filename,self.options)

            print " ... done"
            self.getURL(webview)


def main():

    # parse the command line
    usage = """%prog [options] [http://example.net/ ...]

examples:
%prog http://google.com/                 # screengrab google
%prog -W 1000 -H 1000 http://google.com/ # bigger screengrab of google
%prog -                                  # screengrab urls from stdin"""

    cmdparser = OptionParser(usage, version=("webkit2png "+__version__))
    # TODO: add quiet/verbose options
    cmdparser.add_option("-W", "--width",type="float",default=800.0,
       help="initial (and minimum) width of browser (default: 800)")
    cmdparser.add_option("-H", "--height",type="float",default=600.0,
       help="initial (and minimum) height of browser (default: 600)")
    cmdparser.add_option("--clipwidth",type="float",default=200.0,
       help="width of clipped thumbnail (default: 200)",
       metavar="WIDTH")
    cmdparser.add_option("--clipheight",type="float",default=150.0,
       help="height of clipped thumbnail (default: 150)",
       metavar="HEIGHT")
    cmdparser.add_option("-s", "--scale",type="float",default=0.25,
       help="scale factor for thumbnails (default: 0.25)")
    cmdparser.add_option("-m", "--md5", action="store_true",
       help="use md5 hash for filename (like del.icio.us)")
    cmdparser.add_option("-d", "--datestamp", action="store_true",
       help="include date in filename")
    (options, args) = cmdparser.parse_args()
    if len(args) == 0:
        cmdparser.print_help()
        return
    if options.scale == 0:
      cmdparser.error("scale cannot be zero")

    # work out the initial size of the browser window
    #  (this might need to be larger so clipped image is right size)
    options.initWidth = (options.clipwidth / options.scale)
    options.initHeight = (options.clipheight / options.scale)
    if options.width>options.initWidth:
       options.initWidth = options.width
    if options.height>options.initHeight:
       options.initHeight = options.height
      
    app = NSApplication.sharedApplication()
    
    # create an app delegate
    delegate = AppDelegate.alloc().init()
    NSApp().setDelegate_(delegate)

    # create a window
    rect = NSMakeRect(-16000,-16000,100,100)
    win = NSWindow.alloc()
    win.initWithContentRect_styleMask_backing_defer_ (rect, NSBorderlessWindowMask, 2, 0)

    # create a webview object
    webview = WebKit.WebView.alloc()
    webview.initWithFrame_(rect)
    # turn off scrolling so the content is actually x wide and not x-15
    webview.mainFrame().frameView().setAllowsScrolling_(objc.NO)
    # add the webview to the window
    win.setContentView_(webview)
    
    # create a LoadDelegate
    loaddelegate = WebkitLoad.alloc().init()
    loaddelegate.options = options
    loaddelegate.urls = args
    webview.setFrameLoadDelegate_(loaddelegate)
    
    app.run()    

if __name__ == '__main__' : main()

